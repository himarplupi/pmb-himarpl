// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum DepartmentType {
  BE
  DP
}

enum Role {
  admin
  member
}

model PostTag {
  id        String   @id @default(cuid())
  title     String
  metaTitle String
  slug      String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  posts     Post[]
}

model PostCategory {
  id        String   @id @default(cuid())
  title     String
  metaTitle String
  slug      String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  posts     Post[]
}

model Post {
  id          String         @id @default(cuid())
  authorId    String
  title       String
  metaTitle   String
  slug        String         @unique
  content     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  publishedAt DateTime?
  author      User           @relation(fields: [authorId], references: [id])
  categories  PostCategory[]
  tags        PostTag[]
}

// Define the department model
model Department {
  id          String         @id @default(cuid())
  name        String
  acronym     String?
  image       String?
  description String?
  type        DepartmentType
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  users       User[]
}

model SocialMedia {
  userId   String
  name     String
  username String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, name, username])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  username      String?       @unique
  bio           String?
  position      String?
  role          Role          @default(member)
  lastLoginAt   DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  departmentId  String?
  department    Department?   @relation(fields: [departmentId], references: [id])
  posts         Post[]
  socialMedia   SocialMedia[]
  accounts      Account[]
  sessions      Session[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
